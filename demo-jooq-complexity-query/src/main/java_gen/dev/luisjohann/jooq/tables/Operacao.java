/*
 * This file is generated by jOOQ.
 */
package dev.luisjohann.jooq.tables;


import dev.luisjohann.jooq.Keys;
import dev.luisjohann.jooq.Public;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Check;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Operacao extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.operacao</code>
     */
    public static final Operacao OPERACAO = new Operacao();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>public.operacao.id</code>.
     */
    public final TableField<Record, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.operacao.data_hora</code>.
     */
    public final TableField<Record, LocalDateTime> DATA_HORA = createField(DSL.name("data_hora"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.operacao.pessoa_id</code>.
     */
    public final TableField<Record, Integer> PESSOA_ID = createField(DSL.name("pessoa_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.operacao.usuario_id</code>.
     */
    public final TableField<Record, Integer> USUARIO_ID = createField(DSL.name("usuario_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.operacao.tipo_operacao</code>.
     */
    public final TableField<Record, String> TIPO_OPERACAO = createField(DSL.name("tipo_operacao"), SQLDataType.CHAR(1).nullable(false), this, "");

    private Operacao(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private Operacao(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.operacao</code> table reference
     */
    public Operacao(String alias) {
        this(DSL.name(alias), OPERACAO);
    }

    /**
     * Create an aliased <code>public.operacao</code> table reference
     */
    public Operacao(Name alias) {
        this(alias, OPERACAO);
    }

    /**
     * Create a <code>public.operacao</code> table reference
     */
    public Operacao() {
        this(DSL.name("operacao"), null);
    }

    public <O extends Record> Operacao(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, OPERACAO);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<Record, Integer> getIdentity() {
        return (Identity<Record, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.OPERACAO_PKEY;
    }

    @Override
    public List<UniqueKey<Record>> getKeys() {
        return Arrays.<UniqueKey<Record>>asList(Keys.OPERACAO_PKEY);
    }

    @Override
    public List<ForeignKey<Record, ?>> getReferences() {
        return Arrays.<ForeignKey<Record, ?>>asList(Keys.OPERACAO__OPERACAO_PESSOA_ID_FKEY, Keys.OPERACAO__OPERACAO_USUARIO_ID_FKEY);
    }

    private transient Pessoa _pessoa;
    private transient Usuario _usuario;

    public Pessoa pessoa() {
        if (_pessoa == null)
            _pessoa = new Pessoa(this, Keys.OPERACAO__OPERACAO_PESSOA_ID_FKEY);

        return _pessoa;
    }

    public Usuario usuario() {
        if (_usuario == null)
            _usuario = new Usuario(this, Keys.OPERACAO__OPERACAO_USUARIO_ID_FKEY);

        return _usuario;
    }

    @Override
    public List<Check<Record>> getChecks() {
        return Arrays.<Check<Record>>asList(
              Internal.createCheck(this, DSL.name("tp_oper_compra_venda_chk"), "((tipo_operacao = ANY (ARRAY['C'::bpchar, 'V'::bpchar])))", true)
        );
    }

    @Override
    public Operacao as(String alias) {
        return new Operacao(DSL.name(alias), this);
    }

    @Override
    public Operacao as(Name alias) {
        return new Operacao(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Operacao rename(String name) {
        return new Operacao(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Operacao rename(Name name) {
        return new Operacao(name, null);
    }
}
