<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.2.2</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>dev.luisjohann</groupId>
	<artifactId>demo-jooq-complexity-query</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>demo-jooq-complexity-query</name>
	<description>Demo project for Spring Boot</description>
	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<start-class>dev.luisjohann.DemoJooqComplexityQueryApplication</start-class>
		<java.version>21</java.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-jooq</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.flywaydb</groupId>
			<artifactId>flyway-core</artifactId>
		</dependency>
		<dependency>
			<groupId>org.postgresql</groupId>
			<artifactId>postgresql</artifactId>
			<version>42.7.2</version>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
			<version>3.14.0</version>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>

			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
				<version>1.7</version>
				<executions>
					<execution>
						<id>add-source</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>add-source</goal>
						</goals>
						<configuration>
							<sources>
								<source>src/main/java_gen</source>
							</sources>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

	<profiles>
		<profile>
			<id>jooq-gen</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.jooq</groupId>
						<artifactId>jooq-codegen-maven</artifactId>
						<version>3.14.16</version>
						<dependencies>
							<dependency>
								<groupId>org.postgresql</groupId>
								<artifactId>postgresql</artifactId>
								<version>42.7.2</version>
							</dependency>
						</dependencies>

						<executions>
							<execution>
								<id>jooq-codegen</id>
								<phase>generate-sources</phase>
								<goals>
									<goal>generate</goal>
								</goals>
							</execution>
						</executions>

						<configuration>
							<!-- Configure the database connection here -->
							<jdbc>
								<driver>org.postgresql.Driver</driver>
								<!-- <url>jdbc:postgresql://vboxhost:5432/tst</url> -->
								<url>jdbc:postgresql://postgresdb/postgres</url>
								<user>postgres</user>
								<password>postgres</password>

								<!-- <properties>
			You can also pass user/password and other JDBC properties in the optional properties tag:
		</properties> -->
							</jdbc>

							<generator>
								<database>
									<name>org.jooq.meta.postgres.PostgresDatabase</name>

									<!-- All elements that are generated from your schema (A Java regular expression. Use the pipe to separate several expressions) Watch out for case-sensitivity. Depending on your database, this might be important! You can create case-insensitive regular expressions using this syntax: (?i:expr) -->
									<includes>.*</includes>

									<!-- All elements that are excluded from your schema (A Java regular expression. Use the pipe to separate several expressions). Excludes match before includes -->
									<excludes>temp_.*</excludes>

									<!-- A configuration element to configure several input and/or output schemata for jooq-meta, in case you're using jooq-meta in a multi-schema environment. This cannot be combined with inputSchema / outputSchema -->
									<inputSchema>public</inputSchema>
									<!-- <schemata>
				<schema>
					<inputSchema>public</inputSchema>
				</schema>
				<schema>
					<inputSchema>auditoria</inputSchema>
				</schema>
				<schema>
					<inputSchema>db_migration</inputSchema>
				</schema> 
			</schemata> -->


								</database>

								<generate>
									<deprecated>false</deprecated>
									<jpaAnnotations>false</jpaAnnotations>
									<daos>false</daos>
									<pojos>false</pojos>
									<records>false</records>
									<sequences>false</sequences>
									<newline>\r\n</newline>
								</generate>

								<target>
									<!-- The destination package of your generated classes (within the destination directory) jOOQ may append the schema name to this package if generating multiple schemas, e.g. org.jooq.your.packagename.schema1 org.jooq.your.packagename.schema2 -->
									<packageName>dev.luisjohann.jooq</packageName>

									<!-- The destination directory of your generated classes -->
									<directory>src/main/java_gen</directory>
								</target>
							</generator>

						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
</project>
